
24/3/20
=======

Installed Kair Morich's "Serial USB Terminal" app from play store on
Galaxy Note5 phone.  USB had no driver, tried selecting "CDC" driver
from menu.  Menu -> USB Devices -> Serial showed 19.2 Kbaud, 8 bit, no
parity, one stop bit.  Menu -> USB Devices -> click on device:  It asks
for permission.  Granted. , and clicked "use by default for this USB
device."  Got "Connection failed:  No control endpoint."

On Linux, lsusb tells me the USB port I'm using is
    Bus 001 Device 015: ID 04e8:6860 Samsung Electronics Co., Ltd Galaxy (MTP)
(Device # increments if I unplug & plug back in).
    Ah - maps to something like /dev/bus/usb/001/015 on Ubuntu (018 by now :-) )
    dmesg -w tells me the device # when I plug it in
lsusb tells me that that is an MTP device, so maybe I need to disable that
first?  Tried FTDI driver, now 8 ports are listed for device
05C6 909E on phone.  But, a couple of times I got my phone to hang...  Needed
home-vol down to get it back!

Change of plans:  I'll try making an app using the standard serial API, and
see if it works for folks who have the board.  I don't know if I'm missing
configuration on Android, on Linux, or on both.


==> I suspect that some kind of configuration is needed on the Linux side.
I think my Android phone was looking for a device connected to the USB
port using the CDC protocol, and not finding one.  Maybe the Linux USB 
port need to be put into "peripheral" mode (as opposed to device mode).  
This might not be possible - random googling found a link that says
"Most PCs support USB host mode exclusively"  - cf.
https://developer.toradex.com/knowledge-base/usb-device-mode-(linux)

Found https://pub.dev/packages/usb_serial.  I'll try that, and see if Juraj
or Adam can connect to their hardware using my app, based on that.  If not,
I can always adapt the app from above.

"adb install build/app/outputs/apk/app.apk" does not work...
Need "flutter build appbundle", which creates
build/app/outputs/bundle/release/app.aab.  Then,
bundletool build-apks --bundle=build/app/outputs/bundle/release/app-release.aab --output=~/tmp/tmp/breezy.apks
Then, bundletool install-apks --apks=~/tmp/tmp/breezy.apks

26/3/2020:
Trying to upload a test .aab via
https://play.google.com/apps/publish/internalappsharing/.  Play store
won't let me upload com.jovial.breezy, because that's never been published.
They're quoting 7 day review times.
Trying to release to "internal test" in play store.
Made signing key following
https://flutter.dev/docs/deployment/android#signing-the-app
It seemed to work, BUT the "publish" button was greyed out.  I think
a human needs to review, and they're quoting 7 days.

android/app/build.gradle is where com.jovial.breezy app ID is set.
I changed it to com.jovial.jrpn, and successfully got an app sharing
link under that package name.  To download in the play store, you need to
follow the instructions at
https://support.google.com/googleplay/android-developer/answer/9303479?hl=en
under "How authorized testers turn on internal app sharing".  Yes,
you press the version 7 times.  Once enabled, you send the link
to your phone (gmail, ...), and click on it.  It should take you to
the store, and ask if you want an experimental version of JRPN.

https://flutter.dev/docs/deployment/android describes
    flutter build apk --split-per-abi
That might work - it makes 3 big .apk files:
✓ Built build/app/outputs/apk/release/app-armeabi-v7a-release.apk (5.5MB).
✓ Built build/app/outputs/apk/release/app-arm64-v8a-release.apk (5.8MB).
✓ Built build/app/outputs/apk/release/app-x86_64-release.apk (5.9MB).



6 April 2020
============

Bluetooth setup...
   Various tools are broken in linux; a workaround is here:
       https://bbs.archlinux.org/viewtopic.php?id=201672
   Then, try this setup:
       https://unix.stackexchange.com/questions/92255/how-do-i-connect-and-send-data-to-a-bluetooth-serial-port-on-linux
           (For the SP service I used channel 7, which was available)

That made the "Serial Bluetooth" app on my phone work.  It listed the
paired devices.

Oh - this is "bluetooth classic."  The Flutter library only supports
the newer "bluetooth LE."  Setting up a bluetooth LE service on Linux
is complicated.


